#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generator:server');
var http = require('http');

var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = socket(server);

io.on('connection', function(socket){
  console.log('connected', socket.id)
});

var mysql  = require('mysql');
var con    =  mysql.createConnection({
  host     :  "sql2.freesqldatabase.com",
  user     :  "sql2312550", 
  password :  "gR1*bG2*",
  database :  "sql2312550"
});

con.connect(function(err) {
  if (err) throw err;
  console.log("Connected!");
  var UsrScore = "SELECT Users.USER_ID AS usrID, Users.USERNAME AS Username, Scores.score AS Score FROM Users JOIN Scores ON Scores.USER_ID = Users.USER_ID";
  var LdrBrd   = "SELECT Users.USERNAME AS Username, Scores.HIGHSCORE AS Highscore, Scores.GAMES_PLAYED AS Games_Played FROM Users JOIN Scores ON Users.USER_ID = Scores.USER_ID ORDER BY HIGHSCORE DESC LIMIT 5";
  var CnVis    = "SELECT VISIBLE AS Visible, COIN_ID AS CoinNum, COIN_X AS X, COIN_Y AS Y FROM Coins WHERE Coins.VISIBLE = 1";
  var CnInvis  = "SELECT VISIBLE AS Visible, COIN_ID AS CoinNum, COIN_X AS X, COIN_Y AS Y FROM Coins WHERE Coins.VISIBLE = 0";
  // need to make functions to check if username is already in use and to generate a new user_id (if their name isn't taken)
  //var insert   = "INSERT INTO Users (USERNAME, USER_ID) VALUES ('far', '117')"
  //var insertS  = "INSERT INTO Scores (USER_ID, SCORE, HIGHSCORE) VALUES('110', '8','9')"
  con.query(UsrScore, function (err, result, fields) {
    if (err) throw err;
    console.log("User Scores",result);
  });
  con.query(LdrBrd, function (err, result, fields) {
    if (err) throw err;
    console.log("Leaderboard",result);
  });
  con.query(CnVis, function (err, result, fields) {
    if (err) throw err;
    console.log("Visible Coins",result);
  });
  con.query(CnInvis, function (err, result, fields) {
    if (err) throw err;
    console.log("Invisible Coins",result);
  });
  /*con.query(insert, function (err, result) {
    if (err) throw err;
    console.log("Inserted");
  });
  con.query(insertS, function (err, result) {
    if (err) throw err;
    console.log("Inserted");
  });
  */
  con.query(UsrScore, function (err, result, fields) {
    if (err) throw err;
    console.log("User Scores",result);
  });
});

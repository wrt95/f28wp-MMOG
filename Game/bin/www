#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('generator:server');
var http = require('http');

var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = socket(server);

io.on('connection', function(socket){
  console.log('connected', socket.id)
});

var mysql = require('mysql');

var con = mysql.createConnection({
  host: "sql2.freesqldatabase.com",
  user: "sql2310710", 
  password: "aK1!vU9*",
  database: "sql2310710"
});

  con.connect(function(err) {
    if (err) throw err;
    console.log("Connected!");
    var UsrScore = "SELECT Users.USERNAME AS Username, SCORES.score AS Score FROM Users JOIN SCORES ON SCORES.USER_ID = Users.USER_ID ORDER BY Score DESC";
    var CnVis = "SELECT Coin.VISIBLE AS Visible, Coin.COIN_ID AS CoinNum, Coin_pos.XCOORD AS X, Coin_pos.YCOORD AS Y FROM Coin JOIN Coin_pos ON Coin.COIN_ID = Coin_pos.COIN_ID WHERE Coin.VISIBLE = 1"
    con.query(UsrScore, function (err, result, fields) {
      if (err) throw err;
      console.log(result);
    });
    con.query(CnVis, function (err, result, fields) {
      if (err) throw err;
      console.log(result);
    });
    
  }); 
